#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Preface
  This is my Emacs config. Saving will automatically org-babel-tangle this file to dump the code in source blocks to init.el
  
** Credits
   daviwil/emacs-from-scratch
  
* Quick Config
  #+begin_src emacs-lisp
    (defvar user/default-font-size 140)
  #+end_src

* Startup Performance
  Make garbage collection faster and happen more often to speed up emacs.  
  #+begin_src emacs-lisp
    (setq gc-cons-threshold (* 50 1000 1000))
  #+end_src

* Package Management
  Manage emacs packages using use-package. Package mirrors at melpa, org, and elpa
  #+begin_src emacs-lisp
    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
  #+end_src
** Auto-update Packages
   #+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
   #+end_src

* Keep Folders Clean
  #+begin_src emacs-lisp
    ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
    ;; reliably, set `user-emacs-directory` before loading no-littering!
    (setq user-emacs-directory "~/.cache/emacs")

    (use-package no-littering)

    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  #+end_src

* Icons and Emojis
  Many other packages rely on these
  #+begin_src emacs-lisp
    (use-package all-the-icons)
    (use-package emojify)
  #+end_src

* Startpage
** Inhibit default startpage
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
   #+end_src
** Emacs Dashboard
   New emacs dashboard to replace the default startpage
   #+begin_src emacs-lisp
     (use-package dashboard
       :init
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t)
       (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
       (setq dashboard-startup-banner 'logo)  ;; use custom image as banner
       (setq dashboard-items '((recents . 5)
			     (bookmarks . 3)
			     (projects . 3)))
       :config
       (dashboard-setup-startup-hook)
       (dashboard-modify-heading-icons '((recents . "file-text")
					 (bookmarks . "book"))))

     (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
   #+end_src
  
* User Interface
** General
   #+begin_src emacs-lisp
     ;; make interface minimal
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (menu-bar-mode -1)
     ;; add some margins
     (set-fringe-mode 10)
   #+end_src
** Improve scrolling
   Stop fucking jumping.
   #+begin_src emacs-lisp
     (setq scroll-step 1)
     (setq scroll-conservatively 10000)
     (setq auto-window-vscroll nil)
     (setq scroll-margin 5)
     ;; scroll one line at a time (less "jumpy" than defaults)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
     (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
     (setq scroll-step 1) ;; keyboard scroll one line at a time
   #+end_src
** Themes
   #+begin_src emacs-lisp
     (use-package doom-themes
       :init (load-theme 'doom-palenight t))
   #+end_src
** Modeline
   #+begin_src emacs-lisp
   (use-package doom-modeline
     :init (doom-modeline-mode 1)
     :custom ((doom-modeline-icon (display-graphic-p) )))
   #+end_src

* Ivy and Counsel
  Completion thingies
  #+begin_src emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-f" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-f" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    (use-package ivy-rich
      :after ivy
      :init (ivy-rich-mode 1))

    (use-package counsel
      :bind (("C-M-n" . 'counsel-switch-buffer)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
      :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
      :config
      (counsel-mode 1))
  #+end_src
** Ivy Prescient
   Remember common completions for better suggestions
   #+begin_src emacs-lisp
     (use-package ivy-prescient
       :after counsel
       :custom
       (ivy-prescient-enable-filtering nil)
       :config
       ;; Uncomment the following line to have sorting remembered across sessions!
       (prescient-persist-mode 1)
       (ivy-prescient-mode 1))
   #+end_src

* Org Mode
  #+begin_src emacs-lisp
    (defun user/org-mode-setup ()
      (org-mode-indent)
      (visual-line-mode 1))

    (use-package org
      :pin org
      :hook (org-mode . user/org-mode-setup)
      :config
      (setq org-ellipsis " ▾"))
  #+end_src
** Nicer Org Bullets
   #+begin_src emacs-lisp
    (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  #+end_src
** Org Structure Templates
   Quickly insert code blocks using org-tempo and org structure templates
   #+begin_src emacs-lisp
     (with-eval-after-load 'org
       ;; This is needed as of Org 9.2
       (require 'org-tempo)
  
       (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
       (add-to-list 'org-structure-template-alist '("sh" . "src shell")))
   #+end_src

* Rainbow Delimiters
  Better programming especially for those stupid lisp parentheses.
  #+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src

* Code commenting
  #+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
  #+end_src

* Magit
  #+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  #+end_src

* Projectile
  A project manager.
  #+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Repos")
    (setq projectile-project-search-path '("~/Repos")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))
  #+end_src
  
* Which Key
  Brings up possible keybindings
  #+begin_src emacs-lisp
    (use-package which-key
      :defer 0
      :diminish which-key-mode
      :config
      (which-key-mode)
      (setq which-key-idle-delay 1))
  #+end_src
  
* Auto-tangle init.el
  Makes this config.org file work
  #+begin_src emacs-lisp
    (defun efs/org-babel-tangle-config ()
      (when (string-equal (buffer-file-name)
			  (expand-file-name "~/.config/emacs/config.org"))
	(let ((org-confirm-babel-evaluate nil))
	  (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  #+end_src
