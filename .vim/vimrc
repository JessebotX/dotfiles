set encoding=utf-8
filetype plugin indent on " hybrid line numbers
set background=dark
syntax on

set clipboard^=unnamed,unnamedplus

set conceallevel=2
set nocompatible
set autoindent
set autoread
set history=10000
set hlsearch
set hidden
set incsearch
set mouse=a
set ttyfast
set viminfo+=!
set ttymouse=xterm2
set ignorecase
set smartcase
set ruler
set showcmd
set showmode
set showmatch
set matchtime=5
set scrolloff=5
set splitright
set splitbelow
set nu
set rnu
set linebreak
set wrap

" new backup and swap directories
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

set colorcolumn=80
" tab width
set tabstop=8
set shiftwidth=0 " make it always = tabstop

"
" THEMING
"
if (has('termguicolors'))
	set termguicolors
endif


if (isdirectory(expand("~/.vim/pack")))
	if (!has('termguicolors'))
		let g:gruvbox_termcolors=16
	elseif (has('termguicolors'))
		let g:gruvbox_italic=1
		let g:gruvbox_contrast_dark="soft"
	endif

	colors gruvbox
	hi! EndOfBuffer ctermbg=bg ctermfg=bg guibg=bg guifg=bg
	hi link CursorLine CursorColumn
endif

"
" GENERAL COMMANDS
"
command! Config execute ":e ~/.vim/vimrc"

"
" GENERAL KEYBINDINGS
"
let mapleader=" "
let g:mapleader=" "

" better copypaste
"vmap p         dP

" buffers
nmap <S-h>     :bp<CR>
nmap <S-l>     :bn<CR>
nmap <S-k>     :bd<CR>

" window navigation
nmap <C-h>     <C-w>h
nmap <C-j>     <C-w>j
nmap <C-k>     <C-w>k
nmap <C-l>     <C-w>l
nmap <C-c>     <C-w>c

" stay in indent mode
vmap <         <gv
vmap >         >gv

" netrw (not in use)
let g:netrw_banner = 0
let g:netrw_liststyle = 2
" let g:netrw_winsize = 16

" KEYMAP WILL BE OVERWRITTEN BY NERDTREE
" if (!isdirectory(expand("~/.vim/pack")))
nmap <leader>e :Lex 20<CR>
"endif

" FILETYPE SPECIFIC
au Filetype markdown,pandoc,html,css setlocal tabstop=2 expandtab softtabstop=2
au Filetype gemtext setlocal colorcolumn=
au Filetype gemtext nmap <buffer> j  gj
au Filetype gemtext nmap <buffer> k  gk
au Filetype gemtext nmap <buffer> $  g$
au Filetype gemtext nmap <buffer> 0  g0
au Filetype gemtext nmap <buffer> dd g0dg$
au Filetype gemtext nmap <buffer> yy g0yg$
au Filetype gemtext vmap <buffer> j  gj
au Filetype gemtext vmap <buffer> k  gk
au Filetype gemtext vmap <buffer> $  g$
au Filetype gemtext vmap <buffer> 0  g0
au Filetype gemtext vmap <buffer> dd g0dg$
au Filetype gemtext vmap <buffer> yy g0yg$

" Plugins
" Using vim8 package manager
if (isdirectory(expand("~/.vim/pack"))) 
	"
	" NERDTREE
	"
	"nmap <leader>e :NERDTreeToggle<CR>
	"let NERDTreeShowHidden=1	

	"
	" VIM STARTIFY
	"
	let g:ascii = [
				\ '  ______                           ',
				\ ' |  ____|                          ',
				\ ' | |__   _ __ ___   __ _  ___ ___  ',
				\ ' |  __| | |_ ` _ \ / _` |/ __/ __| ',
				\ ' | |____| | | | | | (_| | (__\__ \ ',
				\ ' |______|_| |_| |_|\__,_|\___|___/ ',
				\ ]                   
	let g:startify_custom_header = g:ascii

	let g:startify_lists = [
				\ { 'type': 'bookmarks', 'header': ['']      },
				\ ]
	let g:startify_bookmarks = [ 
				\ {'a': "./"}, 
				\ {'h': "~/"}, 
				\ {'c': "~/.vim/vimrc"}, 
				\ {'r': "~/Repos"},
				\ ]
	let g:startify_enable_special = 0

	" 
	" VEM TABLINE
	"
	let g:vem_tabline_show_icon=0

	"
	" GOYO + LIMELIGHT
	"
	let g:goyo_width = 80

	autocmd! User GoyoEnter nested call <SID>goyo_enter()
	autocmd! User GoyoLeave nested call <SID>goyo_leave()

	nmap <leader>tb :Goyo<CR>

	function! s:goyo_enter()
		" something to do with tmux
		if executable('tmux') && strlen($TMUX)
			silent !tmux set status off
			silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
		endif
		Limelight " focus (limelight.vim)
		set scrolloff=999 " typewriter style centered cursor
		set noshowmode " don't show mode
		set colorcolumn=0 " hide vertical ruler
	endfunction

	" commands to call after exiting Goyo mode
	function! s:goyo_leave()
		" something to do with tmux
		if executable('tmux') && strlen($TMUX)
			silent !tmux set status on
			silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
		endif
		Limelight! " turn off limelight
		set scrolloff=5 " set scroll margin to 5
		set showmode " show mode
		set colorcolumn=80 " show vertical ruler
	endfunction
endif

"
" CURSOR
"
let &t_SI = "\<Esc>[2 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Change cursor shape for iTerm2 on macOS {
" bar in Insert mode
" inside iTerm2
if $TERM_PROGRAM =~# 'iTerm'
	let &t_SI = "\<Esc>]50;CursorShape=0\x7"
	let &t_SR = "\<Esc>]50;CursorShape=2\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" inside tmux
if exists('$TMUX') && $TERM != 'xterm-kitty'
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
	let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

" inside neovim
if has('nvim')
	let $NVIM_TUI_ENABLE_CURSOR_SHAPE=2
endif

" VIMINFO file
if !has('nvim') | set viminfofile=$HOME/.vim/viminfo | endif
