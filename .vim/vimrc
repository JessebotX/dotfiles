if (filereadable(expand("~/.vim/autoload/plug.vim")))
	call plug#begin("~/.vim/plugged")
		Plug 'morhetz/gruvbox'
		Plug 'joshdick/onedark.vim'
		Plug 'mhinz/vim-startify'
		Plug 'pacha/vem-tabline'
		Plug 'preservim/nerdtree'
		Plug 'junegunn/goyo.vim'
		Plug 'junegunn/limelight.vim'
"		Plug 'ryanoasis/vim-devicons'
	call plug#end()
endif

set encoding=utf-8
filetype plugin indent on " hybrid line numbers
set background=dark
syntax on
set clipboard=unnamed,unnamedplus
set nocompatible
set history=10000
set hlsearch
set hidden
set incsearch
set mouse=a
set ttyfast
set viminfo+=!
set ttymouse=xterm2
set ignorecase
set smartcase
set ruler
set showcmd
set showmode
set showmatch
set matchtime=5
set scrolloff=5
set splitright
set splitbelow
set cursorline
set nu
set rnu
set linebreak
set wrap

set colorcolumn=80
" tab width
set tabstop=3
set softtabstop=3
set shiftwidth=0 " make it always = tabstop

"
" THEMING
"
set guifont=JetBrainsMono\ Nerd\ Font
if (has('termguicolors'))
	set termguicolors
endif

if (filereadable(expand("~/.vim/autoload/plug.vim")))
	let g:gruvbox_italic=1
	let g:gruvbox_contrast_dark="soft"

	colors gruvbox
endif

"
" GENERAL COMMANDS
"
command! Config execute ":e ~/.vim/vimrc"

"
" GENERAL KEYBINDINGS
"
let mapleader=" "
let g:mapleader=" "

" buffers
nmap <Leader>h :bp<CR>
nmap <Leader>l :bn<CR>
nmap <Leader>k :bd<CR>

if (filereadable(expand("~/.vim/autoload/plug.vim")))
	"
	" VIM STARTIFY
	"
	let g:ascii = [
				\ '  ______                           ',
				\ ' |  ____|                          ',
				\ ' | |__   _ __ ___   __ _  ___ ___  ',
				\ ' |  __| | |_ ` _ \ / _` |/ __/ __| ',
				\ ' | |____| | | | | | (_| | (__\__ \ ',
				\ ' |______|_| |_| |_|\__,_|\___|___/ ',
				\ ]                   
	let g:startify_custom_header = startify#center(g:ascii)

	let g:startify_lists = [
				\ { 'type': 'bookmarks', 'header': ['']      },
				\ ]
	let g:startify_bookmarks = [ 
				\ {'a': "./"}, 
				\ {'h': "~/"}, 
				\ {'c': "~/.vim/vimrc"}, 
				\ {'r': "~/repos"},
				\ ]
	let g:startify_enable_special = 0

	"
	" NERDTREE
	"
	nmap <C-x>tt :call NERDTreeToggleAndRefresh()<CR>

	let NERDTreeShowHidden = 1

	function NERDTreeToggleAndRefresh()
		:NERDTreeToggle
		if g:NERDTree.IsOpen()
			:NERDTreeRefreshRoot
		endif
	endfunction

	" 
	" VEM TABLINE
	"
	let g:vem_tabline_show_icon=0

	"
	" GOYO + LIMELIGHT
	"
	let g:goyo_width = 80

	autocmd! User GoyoEnter nested call <SID>goyo_enter()
	autocmd! User GoyoLeave nested call <SID>goyo_leave()

	nmap <leader>tb :Goyo<CR>

	function! s:goyo_enter()
		" something to do with tmux
		if executable('tmux') && strlen($TMUX)
			silent !tmux set status off
			silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
		endif
		Limelight " focus (limelight.vim)
		set scrolloff=999 " typewriter style centered cursor
		set noshowmode " don't show mode
		set colorcolumn=0 " hide vertical ruler
	endfunction

	" commands to call after exiting Goyo mode
	function! s:goyo_leave()
		" something to do with tmux
		if executable('tmux') && strlen($TMUX)
			silent !tmux set status on
			silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
		endif
		Limelight! " turn off limelight
		set scrolloff=5 " set scroll margin to 5
		set showmode " show mode
		set colorcolumn=80 " show vertical ruler
	endfunction
endif

"
" CURSOR
"
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Change cursor shape for iTerm2 on macOS {
" bar in Insert mode
" inside iTerm2
if $TERM_PROGRAM =~# 'iTerm'
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_SR = "\<Esc>]50;CursorShape=2\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" inside tmux
if exists('$TMUX') && $TERM != 'xterm-kitty'
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
	let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

" inside neovim
if has('nvim')
	let $NVIM_TUI_ENABLE_CURSOR_SHAPE=2
endif

" VIMINFO file
if !has('nvim') | set viminfofile=$HOME/.vim/viminfo | endif
